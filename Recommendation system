import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Example movie data
movies_data = {
    'Movie': ['Movie1', 'Movie2', 'Movie3', 'Movie4', 'Movie5'],
    'Genre': ['Action', 'Comedy', 'Drama', 'Action', 'Comedy'],
}

# Example user rating data (replace this with your actual data)
df = pd.DataFrame({
    'User1': [5, 4, 0, 0, 0],
    'User2': [4, 0, 0, 3, 3],
    'User3': [5, 4, 4, 3, 0],
    'User4': [0, 4, 0, 5, 5],
    'User5': [3, 4, 0, 3, 3]
}, index=['Movie1', 'Movie2', 'Movie3', 'Movie4', 'Movie5'])

# Fill NaN values with 0 for similarity calculation
df_filled = df.fillna(0)

# Calculate the cosine similarity between users
user_similarity = cosine_similarity(df_filled.T)
user_similarity_df = pd.DataFrame(user_similarity, index=df.columns, columns=df.columns)

def get_recommendations(user, n_recommendations=2):
    # Get users most similar to the target user
    similar_users = user_similarity_df[user].sort_values(ascending=False).index[1:]
    recommended_movies = pd.Series(dtype=float)

    for similar_user in similar_users:
        similar_user_ratings = df[similar_user]
        # Add movies rated by similar users that the target user hasn't rated
        recommended_movies = recommended_movies.append(similar_user_ratings[similar_user_ratings.notna() & df[user].isna()])

    # Filter out movies the user has already rated
    recommended_movies = recommended_movies[~recommended_movies.index.isin(df[user].dropna().index)]

    # Recommend top N movies
    return recommended_movies.sort_values(ascending=False).head(n_recommendations)

# Get recommendations for User1
recommendations = get_recommendations('User1')
print(recommendations)
