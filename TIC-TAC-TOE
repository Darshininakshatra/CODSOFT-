import math

# Constants
HUMAN = '0'
AI ='X'
EMPTY = ' '

# Initialize board
def create_board():
     return [[EMPTY for _ in range(3)] for _ in range(3)]

# Print the board
def print_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * 8)

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 8)

def check_winner(board, player):
    win_conditions = [
# Top row       
        [board[0][0], board[0][1], board[0][2]],  
# Middle row
        [board[1][0], board[1][1], board[1][2]], 
# Bottom row
        [board[2][0], board[2][1], board[2][2]],  
# Left column
        [board[0][0], board[1][0], board[2][0]],  
# Center column
        [board[0][1], board[1][1], board[2][1]],
# Right column  
        [board[0][2], board[1][2], board[2][2]],
# Diagonal (top-left to bottom-right)  
        [board[0][0], board[1][1], board[2][2]], 
# Diagonal (top-right to bottom-left)
        [board[0][2], board[1][1], board[2][0]]  
    ]
    return [player, player, player] in win_conditions

def is_full(board):
    return all(cell in ['X', 'O'] for row in board for cell in row)

def tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'
    
    while True:
        print_board(board)
        print(f"Player {current_player}'s turn")
        
        row = int(input("Enter row (0, 1, 2): "))
        col = int(input("Enter column (0, 1, 2): "))
        
        if board[row][col] != ' ':
            print("Cell already taken. Choose another.")
            continue
        
        board[row][col] = current_player
        
        if check_winner(board, current_player):
            print_board(board)
            print(f"Player {current_player} wins!")
            break
        
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break
        
        current_player = 'O' if current_player == 'X' else 'X'

tic_tac_toe()
